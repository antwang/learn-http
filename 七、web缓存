# 什么是web缓存
自动保存常见文档副本的HTTP设备。当web请求到达缓存时，如果本地有“已缓存的”副本，就可以从本地存储设备而不是原始服务器中提取这个文档。
# 使用缓存有哪些优点
- 减少了冗余的数据传输
- 环节了网络瓶颈的问题
- 降低了对原始服务器的要求
- 降低了距离时延
# 缓存命中和未命中
可以用已有的副本为某些到达缓存的请求提供服务。这成为缓存命中。如果一些到达缓存的请求没有副本可用，而被转发给原始服务器。这称为缓存未命中。
# 再验证
原始服务器的内容可能发生变化，缓存要不时对其进行检测，看看它们保存的副本是否仍是服务器上的最新版本。这些新鲜度检测被称为HTTP再验证。
缓存对缓存的副本进行再验证时，会向原始服务器发送一个小的再验证请求。如果内容没有变化，服务器会以一个小的304 Not Modified进行响应。只要缓存知道副本仍然有效，就会再次将副本标识为新鲜的，并将副本提供给客户端 ，这称作再验证命中或缓慢命中。这种情况下确实要与服务器进行核对，所以会比单纯的缓存命中要慢，但它没有从服务器获取对象数据，所以要比缓存未命中快一些。
HTTP提供了几个用来对缓存对象进行再验证的工具，其中最常用的是if-Modified-Since首部。将这个首部添加到Get请求中去，就可以告诉服务器，只有在缓存了对象的副本之后，又对其进行了修改的情况下，才发送此对象。
以下列出了3种情况下服务器收到GET if-Modified-Since请求时会发生的情况：
- 再验证命中
如果服务器对象未没修改，服务器会向客户端发送一个小的HTTP 304 Not Modified响应。
- 再验证未命中
如果服务器对象与已缓存副本不同，服务器向客户端发出一条普通的、带有完整内容的HTTP 200 OK响应。
- 对象被删除
如果服务器对象已经删除了，服务器就回送一个404 Not Found响应，缓存也会将其副本删除。
# 命中率
有缓存提供服务的请求所占的比例被称为缓存命中率（或文档命中率）。实际得到的命中率与缓存的大小、缓存用户兴趣点相似性、缓存数据的变化或个性化频率，以及如何配置缓存有关。
# 字节命中率
字节命中率表示的是缓存提供的字节在传输的所有字节中所占的比例。通过这种度量方式，可以得知节省流量的程度。例如，100%的字节命中率说明每个字节都来自缓存。
文档命中率和字节命中率对缓存性能的评估都很有用。文档命中率说明阻止了多少通往外部网络的web事务。提高文档命中率对降低整体延迟很有好处。字节命中率说明阻止了多少字节流向因特网。提高字节命中率对节省带宽有利。
# 如何区分命中与未命中？
HTTP并没有提供一种手段来区分响应是缓存命中还是访问的原始服务器得到的。因为两种情况下响应码都是200 OK。
客户端有一种方法可以判断响应是否来自缓存。就是使用Date首部。将响应中Date首部的值与当前时间进行比较，如果响应中的日期值早于当前时间，客户端通常就可以认为响应来自缓存。
客户端也可以通过Age首部来检测缓存的响应，通过这个首部可以分辨出这条响应的使用期。
# 缓存的拓扑结构
# 缓存的处理步骤
## 接收
## 解析
## 查找
## 新鲜度检测
## 创建响应
## 发送
## 日志
